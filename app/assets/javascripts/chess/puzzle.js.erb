var getCookie = function() {
  let name = "score=";
  let decodedCookie = decodeURIComponent(document.cookie);
  let ca = decodedCookie.split(';');
  for(let i = 0; i <ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }
  return "0";
}

var setCookie = function(score) {
  const d = new Date();
  d.setTime(d.getTime() + (10 * 365 * 24 *60 *60 * 1000));
  let expires = "expires="+ d.toUTCString();
  document.cookie = "score=" + score + ";" + expires + ";path=/";
}

var board,
    game = new Chess();

var solution = $("#board").attr("solution").split(":");

var score = 5;

var decrementScore = function() {
  if (score !== -5) {
    score--;
    score--;
  }
}

// do not pick up pieces if the game is over
// only pick up pieces for the side to move
var onDragStart = function(source, piece, position, orientation) {
  if (game.game_over() === true ||
      (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
      (game.turn() === 'b' && piece.search(/^w/) !== -1) ||
      (solution.length === 0)) {
    return false;
  }
};

var makeComputerMove = function() {
  if (solution.length === 0) return;
  game.move(solution.shift());
  board.position(game.fen());
};

var onDrop = function(source, target) {
  var promotion
  if (game.get(source).type === "p" && target.match(/1|8/)) {
    promotion = prompt("Enter promotion (q, r, b, n):");
  }

  // see if the move is legal
  var move = game.move({
    from: source,
    to: target,
    promotion: promotion
  });

  if (source === target) {
    return 'snapback';
  }

  // illegal move
  if (move === null) {
    alert("Sorry, this is not a legal move!")
    return 'snapback';
  }

  // correct move
  var correctMove = solution[0];
  if (move.san !== correctMove) {
    alert("Sorry, this is not the correct move!");
    decrementScore();
    game.undo();
    return 'snapback';
  }
  solution.shift();

  // solved or move
  if (solution.length === 0) {
    var totalScore = getCookie();
    setCookie(Number(totalScore) + score);
    $('#score').text("Score: " + (Number(totalScore) + score));
    alert("You have solved this puzzle and get " + score + " points!");
  } else {
    window.setTimeout(makeComputerMove, 250);
  }
};

// update the board position after the piece snap
// for castling, en passant, pawn promotion
var onSnapEnd = function() {
  board.position(game.fen());
};

var position = $("#board").attr("start-position");
var toMove = $("#board").attr("to-move");

var cfg = {
  draggable: true,
  position: position,
  orientation: toMove,
  onDragStart: onDragStart,
  onDrop: onDrop,
  onSnapEnd: onSnapEnd
};
board = ChessBoard('board', cfg);
game.load($("#board").attr("fen"));

$('#board').on('scroll touchmove touchend touchstart contextmenu', function(e) {
  e.preventDefault();
});

$(document).ready(function() {
  $('#score').text("Score: " + getCookie());
});
